name: CI/CD Pipeline (Nix)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DFX_VERSION: 0.27.0
  NODE_VERSION: 20

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: 🔧 Setup Nix cache
        uses: actions/cache@v4
        with:
          path: /nix/store
          key: nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
            nix-store-${{ runner.os }}-
            nix-store-
          enableCrossOsArchive: false
          fail-on-cache-miss: false
          lookup-only: false
          save-always: true

      - name: 🔧 Setup Nix config cache
        uses: actions/cache@v4
        with:
          path: ~/.config/nix
          key: nix-config-${{ runner.os }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            nix-config-${{ runner.os }}-

      - name: 🔍 Debug cache info
        run: |
          echo "Cache key: nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Flake.lock hash: ${{ hashFiles('flake.lock') }}"
          echo "Cache path: /nix/store"
          ls -la /nix/store | head -10 || echo "Nix store not found (this is normal on first run)"

      - name: 🔧 Enable flakes
        run: |
          mkdir -p ~/.config/nix
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

      - name: 🔧 Install DFX
        run: |
          # Install dfx using the official installer
          DFX_VERSION=0.27.0 sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)" -- --yes
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH
          dfx --version

      - name: 🔧 Install Node.js
        run: |
          # Install Node.js using the official installer
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node --version
          npm --version

      - name: 🔧 Install dependencies
        run: |
          nix develop --command echo "Dependencies installed"
          nix develop --command python3 --version

      - name: 🔧 Setup dfx environment
        run: |
          nix develop --command bash -c '
            dfx start --clean --background
            dfx identity new test-identity --disable-encryption || true
            dfx identity use test-identity
            dfx identity get-principal
          '

      - name: 🧪 Run backend tests
        run: |
          nix develop --command bash -c '
            cd backend
            dfx canister create backend --no-wallet
            dfx build backend
            dfx canister install backend --mode=reinstall
            dfx canister call backend test
          '

      - name: 🧪 Run socialgraph tests
        run: |
          nix develop --command bash -c '
            cd socialgraph
            dfx canister create socialgraph --no-wallet
            dfx build socialgraph
            dfx canister install socialgraph --mode=reinstall
            dfx canister call socialgraph test
          '

      - name: 🧪 Run content tests
        run: |
          nix develop --command bash -c '
            cd content
            dfx canister create content --no-wallet
            dfx build content
            dfx canister install content --mode=reinstall
            dfx canister call content test
          '

      - name: 🧪 Run frontend tests
        run: |
          nix develop --command bash -c '
            cd frontend
            npm install
            npm run test
          '

      - name: 🧪 Run integration tests
        run: |
          nix develop --command bash -c '
            # Test inter-canister communication
            dfx canister call backend createUser '("test-user", "test@example.com")'
            dfx canister call socialgraph followUser '("test-user", "other-user")'
            dfx canister call content createPost '("test-user", "Hello World!")'
          '

  build:
    name: 🏗️ Build & Validate
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: 🔧 Setup Nix cache
        uses: actions/cache@v4
        with:
          path: /nix/store
          key: nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
            nix-store-${{ runner.os }}-
            nix-store-

      - name: 🔧 Enable flakes
        run: |
          mkdir -p ~/.config/nix
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

      - name: 🔧 Setup dfx environment
        run: |
          nix develop --command bash -c '
            dfx start --clean --background
            dfx identity new test-identity --disable-encryption || true
            dfx identity use test-identity
          '

      - name: 🏗️ Build backend
        run: |
          nix develop --command bash -c '
            cd backend
            dfx canister create backend --no-wallet
            dfx build backend
          '

      - name: 🏗️ Build socialgraph
        run: |
          nix develop --command bash -c '
            cd socialgraph
            dfx canister create socialgraph --no-wallet
            dfx build socialgraph
          '

      - name: 🏗️ Build content
        run: |
          nix develop --command bash -c '
            cd content
            dfx canister create content --no-wallet
            dfx build content
          '

      - name: 🏗️ Build frontend
        run: |
          nix develop --command bash -c '
            cd frontend
            npm install
            npm run build
          '

      - name: 🔍 Validate canister interfaces
        run: |
          nix develop --command bash -c '
            dfx canister id backend
            dfx canister id socialgraph
            dfx canister id content
          '

  lint:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: 🔧 Setup Nix cache
        uses: actions/cache@v4
        with:
          path: /nix/store
          key: nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
            nix-store-${{ runner.os }}-
            nix-store-

      - name: 🔧 Enable flakes
        run: |
          mkdir -p ~/.config/nix
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

      - name: 🔍 Lint Motoko code
        run: |
          nix develop --command bash -c '
            # Check for common Motoko issues
            find . -name "*.mo" -exec echo "Checking {}" \;
            find . -name "*.mo" -exec grep -l "import" {} \; | head -5
          '

      - name: 🔍 Lint JavaScript/TypeScript
        run: |
          nix develop --command bash -c '
            cd frontend
            npm install
            npm run lint
          '

      - name: 🔍 Check formatting
        run: |
          nix develop --command bash -c '
            # Check if files are properly formatted
            echo "Checking file formatting..."
            find . -name "*.mo" -o -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | head -10
          '

  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test, build, lint]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: 🔧 Setup Nix cache
        uses: actions/cache@v4
        with:
          path: /nix/store
          key: nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
            nix-store-${{ runner.os }}-
            nix-store-

      - name: 🔧 Enable flakes
        run: |
          mkdir -p ~/.config/nix
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

      - name: 🔧 Setup dfx environment
        run: |
          nix develop --command bash -c '
            dfx start --clean --background
            dfx identity new test-identity --disable-encryption || true
            dfx identity use test-identity
          '

      - name: 🚀 Deploy to playground
        run: |
          nix develop --command bash -c '
            dfx deploy --playground
            echo "Deployed to playground"
            dfx canister status --all
          '

      - name: 🔍 Verify deployment
        run: |
          nix develop --command bash -c '
            dfx canister call backend createUser '("test-user", "test@example.com")'
            dfx canister call socialgraph followUser '("test-user", "other-user")'
            dfx canister call content createPost '("test-user", "Hello from CI!")'
          '

      - name: 📊 Report deployment status
        run: |
          nix develop --command bash -c '
            echo "## 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
            echo "✅ Successfully deployed to playground" >> $GITHUB_STEP_SUMMARY
            echo "🔗 Playground URL: https://playground.dfinity.org" >> $GITHUB_STEP_SUMMARY
            dfx canister status --all >> $GITHUB_STEP_SUMMARY
          ' 